import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import * as heliosVM from '../wasm/helios_vm';
import { InlineDebugAdapterFactory } from './sbpfDebug';

console.log('VS Code extension activated:', vscode.version);

export async function activate(context: vscode.ExtensionContext) {

    // Initialize the WebAssembly module
    const wasmPath = path.join(context.extensionPath, 'wasm', 'helios_vm_bg.wasm');
    const wasmBuffer = fs.readFileSync(wasmPath);

    console.log("heliosVM loaded:", Object.keys(heliosVM));
    const factory = new InlineDebugAdapterFactory();

    context.subscriptions.push(
      vscode.debug.registerDebugAdapterDescriptorFactory('helios-sbpf', factory),
      factory // also disposable
    );

    let generateDisposable = vscode.commands.registerCommand('helios-sbpf-analyzer.assemble', async () => {
        const editor = vscode.window.activeTextEditor;
        if (!editor) {
            vscode.window.showErrorMessage('No active editor found');
            return;
        }

        const document = editor.document;
        const filePath = document.uri.fsPath;
        const fileExtension = path.extname(filePath).toLowerCase();

        if (fileExtension !== '.s') {
            vscode.window.showErrorMessage('Please open a .s file');
            return;
        }

        try {
            const assembly = document.getText();
            const bytecode = heliosVM.assemble(assembly);
            
            // Save the generated bytecode
            const outputPath = filePath.replace('.s', '.so');
            fs.writeFileSync(outputPath, bytecode);
            
            vscode.window.showInformationMessage(`Bytecode generated and saved to ${outputPath}`);
        } catch (error) {
            vscode.window.showErrorMessage(`Error generating bytecode: ${error}`);
        }
    });
    
    let runDisposable = vscode.commands.registerCommand('helios-sbpf-analyzer.run', async () => {
        try {
            const editor = vscode.window.activeTextEditor;
            if (!editor) {
                vscode.window.showErrorMessage('No active editor found');
                return;
            }
    
            const code = editor.document.getText();
            const result = heliosVM.run(code); // assuming `run` takes code string
            vscode.window.showInformationMessage(`VM output: ${result}`);
        } catch (err) {
            vscode.window.showErrorMessage(`Error running VM: ${err}`);
        }
    });
    
    context.subscriptions.push(generateDisposable, runDisposable);
}

export function deactivate() {} 